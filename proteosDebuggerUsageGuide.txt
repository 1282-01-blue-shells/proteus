
The ProteOS Debugger has three functionalities:
- Print text to the screen
- Temporarily pause execution
- Allow a function to be aborted via the screen


NOTE: avoid using LCD.Clear() or other LCD functions while inside the debugger.


To print to the screen, use the following functions:

void printLineF(int row, const char* format, ...);
void printAppendF(int row, const char* format, ...);
int printNextLineF(const char* format, ...);
void clearDebugLog();

printLineF() writes to the specified line, overwriting the line's contents if there were any.
printAppendF() appends text to the end of the specified line.
printNextLineF() writes to the first empty line on screen, returning the line number it wrote to.
clearDebugLog() erases all text on screen.
These print functions can format strings, similarly to printf(), and they use the same syntax.


To pause execution mid-function, use the following function:

void breakpoint();
bool breakpoint(float timeout);

This function displays the message "Touch to continue." and waits for the user to touch the screen
before continuing. If a timeout is provided, it will automatically continue after the specified
amount of time, and if it does time out, it will return true.


To allow a function to be aborted, use the following functions:

void abortCheck();
void sleepWithAbortCheck(float time);

abortCheck() checks if the user is pressing the Abort button, and if they are, it terminates the
current function by throwing an exception, which is caught by the debugger. If your function has a
busy loop, such as a state machine, call this function each iteration of the loop.

sleepWithAbortCheck() waits the specified amount of time, similarly to the Sleep() function, except
it also checks if the user is pressing the Abort button. If so, it throws an exception, similarly
to abortCheck().


If any of these functions are called outside the debugger, they will immediately return, except for
sleepWithAbortCheck(), which will function similarly to Sleep() instead.